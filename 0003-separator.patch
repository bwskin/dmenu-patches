From 71acac7288d404dfa26a06c296abf1a17b9b0a4c Mon Sep 17 00:00:00 2001
From: naoto <nnomura98@gmail.com>
Date: Tue, 11 Oct 2022 14:24:41 +0200
Subject: [PATCH 03/10] separator

Original source: https://tools.suckless.org/dmenu/patches/separator/
---
 dmenu.1 | 12 ++++++++++++
 dmenu.c | 31 +++++++++++++++++++++++++++----
 2 files changed, 39 insertions(+), 4 deletions(-)

diff --git a/dmenu.1 b/dmenu.1
index c48ae24..b89889f 100644
--- a/dmenu.1
+++ b/dmenu.1
@@ -30,6 +30,10 @@ dmenu \- dynamic menu
 .IR color ]
 .RB [ \-w
 .IR windowid ]
+.RB [ \-d
+.IR separator ]
+.RB [ \-D
+.IR separator ]
 .P
 .BR dmenu_run " ..."
 .SH DESCRIPTION
@@ -109,6 +113,14 @@ prints version information to stdout, then exits.
 .TP
 .BI \-w " windowid"
 embed into windowid.
+.TP
+.BI \-d " separator"
+separate the input into two halves on the first occurrence of the given charcter.
+Display only the first half in dmenu and print the second half to stdout upon selection.
+Appending '|' to the separator reverses the display/printing order.
+.TP
+.BI \-D " separator"
+same as \-d but separate based on the last occurrence.
 .SH USAGE
 dmenu is completely controlled by the keyboard.  Items are selected using the
 arrow keys, page up, page down, home, and end.
diff --git a/dmenu.c b/dmenu.c
index 8464be6..00fdfd4 100644
--- a/dmenu.c
+++ b/dmenu.c
@@ -30,12 +30,15 @@ enum { SchemeNorm, SchemeSel, SchemeOut, SchemeLast }; /* color schemes */
 
 struct item {
 	char *text;
+	char *text_output;
 	struct item *left, *right;
 	int out;
 };
 
 static char text[BUFSIZ] = "";
 static char *embed;
+static char separator, separator_reverse;
+static char * (*sepchr)(const char *, int);
 static int bh, mw, mh;
 static int dmx = 0; /* put dmenu at this x offset */
 static int dmy = 0; /* put dmenu at this y offset (measured from the bottom if topbar is 0) */
@@ -108,7 +111,7 @@ cleanup(void)
 	for (i = 0; i < SchemeLast; i++)
 		free(scheme[i]);
 	for (i = 0; items && items[i].text; ++i)
-		free(items[i].text);
+		free(separator_reverse ? items[i].text_output : items[i].text);
 	free(items);
 	drw_free(drw);
 	XSync(dpy, False);
@@ -493,7 +496,7 @@ insert:
 		break;
 	case XK_Return:
 	case XK_KP_Enter:
-		puts((sel && !(ev->state & ShiftMask)) ? sel->text : text);
+		puts((sel && !(ev->state & ShiftMask)) ? sel->text_output : text);
 		if (!(ev->state & ControlMask)) {
 			cleanup();
 			exit(0);
@@ -552,7 +555,7 @@ paste(void)
 static void
 readstdin(void)
 {
-	char *line = NULL;
+	char *p, *line = NULL;
 	size_t i, junk, size = 0;
 	ssize_t len;
 
@@ -564,6 +567,19 @@ readstdin(void)
 		if (line[len - 1] == '\n')
 			line[len - 1] = '\0';
 		items[i].text = line;
+
+		if (separator && (p = sepchr(items[i].text, separator)) != NULL) {
+			*p = '\0';
+			items[i].text_output = ++p;
+		} else {
+			items[i].text_output = items[i].text;
+		}
+		if (separator_reverse) {
+			p = items[i].text;
+			items[i].text = items[i].text_output;
+			items[i].text_output = p;
+		}
+
 		items[i].out = 0;
 	}
 	if (items)
@@ -716,7 +732,8 @@ usage(void)
 {
 	die("usage: dmenu [-bfiv] [-l lines] [-h height] [-p prompt] [-fn font] [-m monitor]\n"
 	    "             [-x xoffset] [-y yoffset] [-z width]\n"
-	    "             [-nb color] [-nf color] [-sb color] [-sf color] [-w windowid]");
+	    "             [-nb color] [-nf color] [-sb color] [-sf color] [-w windowid]\n"
+	    "             [-d separator] [-D separator]");
 }
 
 int
@@ -768,6 +785,12 @@ main(int argc, char *argv[])
 			colors[SchemeSel][ColFg] = argv[++i];
 		else if (!strcmp(argv[i], "-w"))   /* embedding window id */
 			embed = argv[++i];
+		else if (!strcmp(argv[i], "-d") || /* field separator */
+		         !strcmp(argv[i], "-D")) {
+			sepchr = argv[i][1] == 'D' ? strrchr : strchr;
+			separator = argv[++i][0];
+			separator_reverse = argv[i][1] == '|';
+		}
 		else
 			usage();
 
-- 
2.38.0

